<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="lang" content="en">
        <meta name="description" content="A simple interactive world map made with java">
        <meta name="keywords" content="world map, javascript">
        <meta name="author" content="Matteo Ciocci">
        <title>Timer</title>
        <link rel="stylesheet" href="/fullscreen-style.css">
        <script src="/d3.min.js"></script>
    </head>
    <body id="body">
        <div style="width: 100%">
            <div class="container"></div>
            <div class = "controls-container">
                <button onclick="toggle()" id="toggleTimer" class="timerControl">
                    <div id="play-icon" style="left: 4px;top: 13px;">
                        <img src="/images/play.svg" alt="Play Icon" width="30">
                    </div>
                    <div id="pause-icon" style="top: -20px;">
                        <img src="/images/pause.svg" alt="Pause Icon" width="30">
                    </div>
                </button>

                <button onclick="reset(true)" class="timerControl" id="reset-button" >
                    <div id="particle-container" style="overflow: hidden;"></div>
                    <div id="reset-icon">
                        <img src="/images/reset.svg" alt="Reset Icon" width="30">
                    </div>
                </button>
                
                <input type="number" value="0" name="hours" min="0" max="48" class="timerInput" oninput="validateNumber(this)" id="hoursInput">
                <label for="hoursInput" class="input-label">h<br class="label-helper"></label>
                
                <input type="number" value="2" name="minutes" min="0" max="59" class="timerInput" oninput="validateNumber(this)" id="minutesInput">
                <label for="minutesInput" class="input-label">m<br class="label-helper"></label>
                
                <input type="number" value="30" name="seconds" min="0" max="59" class="timerInput" oninput="validateSeconds()" id="secondsInput">
                <label for="secondsInput" class="input-label">s<br class="label-helper"></label>


                <input type='file' hidden id="hiddenUpload" accept="image/*" onchange="uploadImage(event)"/>
                
                <button onclick="toggleSound()" class="timerControl active" id="toggleSound">
                    <div id="unmute-icon" style="top: 13px;">
                        <img src="/images/unmute.svg" alt="Unmute Icon" width="30">
                    </div>
                    <div id="mute-icon" style="top: -20px;">
                        <img src="/images/mute.svg" alt="Mute Icon" width="30">
                    </div>
                </button>

                <button onclick="toggleTheme()" class="timerControl active" id="toggleTheme">
                    <div id="sun-icon" style="top: 13px;">
                        <img src="/images/sun.svg" alt="Sun Icon" width="30">
                    </div>
                    <div id="moon-icon" style="top: -20px;left: -2px;">
                        <img src="/images/moon.svg" alt="Moon Icon" width="30">
                    </div>
                </button>

                <div class="dropdown">
                    <button onclick="uploadImageClick()" class="timerControl" id="upload-image-button">
                        <div id="add-image-icon">
                            <img src="/images/add-image.svg" alt="Add Image Icon" width="30">
                        </div>
                    </button>
                    <div id="upload-image-dropdown" class="dropdown-content">
                        <div class="dropdown-item" id="dropdown-img-1">
                          <label>Image 1</label>
                          <span class="element-status">set</span>
                          <img src="/images/delete.svg" alt="Delete Image Icon" width="30" class="delete-image">
                          <img src="/images/edit.svg" alt="Edit Image Icon" width="30" class="edit-image">
                        </div>
                        <div class="dropdown-item" id="dropdown-img-2">
                          <label href="#">Image 2</label>
                          <span class="element-status">---</span>
                          <img src="/images/delete.svg" alt="Delete Image Icon" width="30" class="delete-image">
                          <img src="/images/edit.svg" alt="Edit Image Icon" width="30" class="edit-image">
                        </div>
                        <div class="dropdown-item" id="dropdown-img-3">
                          <label href="#">Image 3</label>
                          <span class="element-status">set</span>
                          <img src="/images/delete.svg" alt="Delete Image Icon" width="30" class="delete-image">
                          <img src="/images/edit.svg" alt="Edit Image Icon" width="30" class="edit-image">
                        </div>
                        <label class="dropdown-hint-label">images can be dragged and resized</label>
                      </div>
                    </div>
                </div>
            </div>
            <div id="images">
                <div id="img-1" class="image">
                    <img draggable="false">
                    <label class="image-helper">1</label>
                </div>
                <div id="img-2" class="image">
                    <img draggable="false">
                    <label class="image-helper">2</label>
                </div>
                <div id="img-3" class="image">
                    <img draggable="false">
                    <label class="image-helper">3</label>
                </div>
            </div>
            <script src="/timer.js"></script>
            <script>
                // THIS SCRIPT IS NEEDED TO INIT ALL THE VARIABLES
                const tickSound = new Audio('/sounds/tick.mp3');
                const beepEndSound = new Audio('/sounds/beep-end.wav');
                let canModifyTimer = JSON.parse('<%- JSON.stringify( isOwner ) %>');
                
                if (!canModifyTimer){
                    document.getElementById('toggleTimer').style.display = 'none';
                    document.getElementById('reset-button').style.display = 'none';
                    document.querySelectorAll('.timerInput').forEach(input => {
                        input.style.display = 'none';
                    });
                    document.querySelectorAll('.input-label').forEach(label => {
                        label.style.display = 'none';
                    });
                }

                // Get timer properties from the provided arguments
                const user = JSON.parse('<%- JSON.stringify(user) %>');
                const timerId = JSON.parse('<%- JSON.stringify(timer.id) %>');
                
                const hours = new Timer(48,
                47-JSON.parse('<%- JSON.stringify( timer.duration.hours ) %>')-JSON.parse('<%- JSON.stringify( timer.elapsedTime.hours ) %>'),
                250, 250, "hours",
                function () {

                }, false, function () {return false;});
                
                const minutes = new Timer(60,
                59-JSON.parse('<%- JSON.stringify( timer.duration.minutes ) %>')+JSON.parse('<%- JSON.stringify( timer.elapsedTime.minutes ) %>'),
                250, 250, "minutes",
                function () {
                    if (hours.maxTime-hours.timePassed <= 0){
                        minutes.started = false;
                        minutes.animate();
                        minutes.label.text(0);
                        return;
                    }
                    else{
                        
                        hours.update();
                        minutes.timeLimit = minutes.maxTime;
                        minutes.paused = false;
                        minutes.started = true;
                        minutes.timePassed = 0;
                        minutes.update();
                    }
                }, false, function () {return false;});
                const seconds = new Timer(60, 
                59-JSON.parse('<%- JSON.stringify( timer.duration.seconds ) %>')+JSON.parse('<%- JSON.stringify( timer.elapsedTime.seconds ) %>'),
                250, 250, "seconds",
                function () {
                    if (minutes.maxTime-minutes.timePassed <= 0 && hours.maxTime-hours.timePassed <= 0){
                        // Pause the timer and play the end sound
                        if (document.getElementById("toggleSound").classList.contains("active")) {
                            beepEndSound.play();
                            alert("Time is up!");
                            beepEndSound.pause();
                            beepEndSound.currentTime = 0;
                        }
                        document.getElementById("toggleTimer").classList.remove('active');
                        reset();
                    }
                    else{
                        minutes.update();
                        seconds.timeLimit = minutes.maxTime;
                        seconds.timePassed = 0;
                        seconds.started = true;
                        seconds.maxTime = seconds.timeLimit;
                        seconds.update();
                    }
                }, true,
                function () {
                    return minutes.getRemaningTime() <= 0 && hours.getRemaningTime() <= 0 && seconds.getRemaningTime() <= 15;
                }, function () {if (document.getElementById("toggleSound").classList.contains("active")) {tickSound.play()}});
                
                
                // Set up timer properties
                //hours.timeLimit = JSON.parse('<%- JSON.stringify( timer.duration.hours ) %>');
                //hours.timePassed = JSON.parse('<%- JSON.stringify( timer.elapsedTime.hours ) %>');
                hours.started = JSON.parse('<%- JSON.stringify( timer.started ) %>');
                hours.paused = hours.started? JSON.parse('<%- JSON.stringify( timer.paused ) %>'): true;
        
                //minutes.timeLimit = JSON.parse('<%- JSON.stringify( timer.duration.minutes ) %>');
                //minutes.timePassed = JSON.parse('<%- JSON.stringify( timer.elapsedTime.minutes ) %>');
                minutes.started = JSON.parse('<%- JSON.stringify( timer.started ) %>');
                minutes.paused = minutes.started? JSON.parse('<%- JSON.stringify( timer.paused ) %>'): true;
        
                
                //seconds.timeLimit = JSON.parse('<%- JSON.stringify( timer.duration.seconds ) %>');
                //seconds.timePassed = JSON.parse('<%- JSON.stringify( timer.elapsedTime.seconds ) %>');
                seconds.started = JSON.parse('<%- JSON.stringify( timer.started ) %>');
                seconds.paused = seconds.started? JSON.parse('<%- JSON.stringify( timer.paused ) %>'): true;

                hours.animate()
                minutes.animate()
                seconds.animate() 

                if (seconds.started && !seconds.paused){
                    hours.paused = false;
                    hours.started = true;
                    hours.field.each(d => {
                        d.previous = undefined;
                    });
                    hours.path.transition()
                        .ease("elastic")
                        .duration(500)
                        .attrTween("d", hours.arcTween(hours.width));
                    hours.animate();
                    hours.update(true);
                    minutes.paused = false;
                    minutes.started = true;
                    minutes.field.each(d => {
                        d.previous = undefined;
                    });
                    minutes.path.transition()
                        .ease("elastic")
                        .duration(500)
                        .attrTween("d", minutes.arcTween(minutes.width));
                    minutes.animate();
                    minutes.update(true);
                    seconds.paused = false;
                    seconds.started = true;
                    seconds.field.each(d => {
                        d.previous = undefined;
                    });
                    seconds.path.transition()
                        .ease("elastic")
                        .duration(500)
                        .attrTween("d", seconds.arcTween(seconds.width));
                    seconds.animate();
                    seconds.update();
                }
            </script>
            <script src="/fullscreen-script.js"></script>
        </div>
    </body>
</html>